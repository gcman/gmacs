(require 'cl-lib)
(require 'dash)

(define-minor-mode pretty-math-mode
  "Minor mode for math"
  :init-value nil
  (font-lock-fontify-buffer)
  (if pretty-math-mode
      (font-lock-add-keywords nil (og/pretty-math-keywords))
    (font-lock-remove-keywords nil (og/pretty-math-keywords))))

(defvar og/math-greek-upper
  '(("Gamma" "Γ")
    ("Delta" "Δ")
    ("Epsilon" "Ε")
    ("Theta" "Θ")
    ("Lambda" "Λ")
    ("Xi" "Ξ")
    ("Pi" "Π")
    ("Sigma" "Σ")
    ("Upsilon" "Υ")
    ("Phi" "Φ")
    ("Psi" "Ψ")
    ("Omega" "Ω")))

(defvar og/math-greek-lower
  '(("alpha" "α")
    ("beta" "β")
    ("gamma" "γ")
    ("delta" "δ")
    ("epsilon" "ε")
    ("zeta" "ζ")
    ("eta" "η")
    ("theta" "θ")
    ("iota" "ι")
    ("kappa" "κ")
    ("lambda" "λ")
    ("mu" "μ")
    ("nu" "ν")
    ("xi" "ξ")
    ("omicron" "ο")
    ("pi" "π")
    ("rho" "ρ")
    ("sigma" "σ")
    ("tau" "τ")
    ("upsilon" "υ")
    ("phi" "ϕ")
    ("chi" "χ")
    ("psi" "ψ")
    ("omega" "ω")
    ("varphi" "φ")
    ("vartheta" "ϑ")
    ("varpi" "ϖ")
    ("varrho" "ϱ")
    ("varsigma" "ς")))

(defvar og/math-vectors
  (append
   (cl-loop for i from 65 to 90
            collect (list (concat "vec " (char-to-string i))
                          (char-to-string (+ i 120211))))
   (cl-loop for i from 97 to 122
            collect (list (concat "vec " (char-to-string i))
                          (char-to-string (+ i 120205))))))

(defvar og/math-letters
  (append
   og/math-greek-lower
   og/math-greek-upper
   og/math-vectors
   '(("aleph" "ℵ")
     ("hbar" "ħ")
     ("ell" "ℓ")
     ("wp" "℘")
     ("partial" "∂")
     ("pd" "∂")
     ("N" "𝗡")
     ("Z" "𝗭")
     ("Q" "𝗤")
     ("R" "𝗥")
     ("C" "𝗖")
     ("F" "𝗙")
     ("Prob" "𝗣")
     ("E" "𝗘")
     ("A" "𝗔"))))

(defvar og/math-arrows
  '(("rightarrow" "→")        ; Directions
    ("leftarrow" "←")
    ("leftrightarrow" "↔")
    ("Rightarrow" "⇒")
    ("Leftarrow" "⇐")
    ("Leftrightarrow" "⇔")
    ("uparrow" "↑")
    ("downarrow" "↓")
    ("updownarrow" "↕")
    ("Uparrow" "⇑")
    ("Downarrow" "⇓")
    ("Updownarrow" "⇕")
    ("nearrow" "↗")
    ("searrow" "↘")
    ("nwarrow" "↖")
    ("swarrow" "↙")
    ("Longrightarrow" "⟹")  ; Long arrows
    ("implies" "⟹")  ; Long arrows
    ("longrightarrow" "⟶")
    ("longleftarrow" "⟵")
    ("Longleftarrow" "⟸")
    ("impliedby" "⟸")
    ("longmapsto" "⟼")
    ("longleftrightarrow" "⟷")
    ("Longleftrightarrow" "⟺")
    ("iff" "⟺")
    ("leftharpoonup" "↼")     ; Special Arrows
    ("leftharpoondown" "↽")
    ("rightharpoonup" "⇀")
    ("rightharpoondown" "⇁")
    ("rightleftharpoons" "⇌")
    ("hookrightarrow" "↪")
    ("hookleftarrow" "↩")))

(defvar og/math-operators
  '(("bigvee" "⋁")
    ("bigwedge" "⋀")
    ("biguplus" "⨄")
    ("bigcap" "⋂")
    ("bigcup" "⋃")
    ("nabla" "∇")
    ("prod" "∏")
    ("coprod" "∐")
    ("int" "∫")
    ("iint" "∬")
    ("iiint" "∭")
    ("oint" "∮")
    ("oiint" "∯")
    ("oiiint" "∰")
    ("sum" "∑")
    ("bigotimes" "⨂")
    ("bigoplus" "⨁")
    ("bigodot" "⨀")
    ("bigsqcup" "⨆")
    ("bigcirc" "◯")))

(defvar og/math-spaced
  (append
   og/math-arrows
  '(("geq" "≥")
    ("ge" "≥")
    ("leq" "≤")
    ("le" "≤")
    ("neq" "≠")
    ("land" "∧")
    ("lor" "∨")
    ("neg" "¬")
    ("forall" "∀")
    ("exists" "∃")
    ("Diamond" "⋄")
    ("Box" "□")
    ("models" "⊧")
    ("bot" "⊥")
    ("top" "⊤")
    ("mid" "|")
    ("cup" "∪")
    ("cap" "∩")
    ("setminus" "∖")
    ("minus" "∖")
    ("subseteq" "⊆")
    ("subset" "⊂")
    ("in" "∊")
    ("ni" "∋")
    ("notin" "∉")
    ("mapsto" "↦")
    ("to" "→")
    ("times" "×")
    ("equiv" "≡")
    ("sqcap" "⊓")
    ("sqcup" "⊔")
    ("uplus" "⊎")
    ("amalg" "⨿")
    ("odot" "⊙")
    ("oslash" "⊘")
    ("otimes" "⊗")
    ("ominus" "⊖")
    ("oplus" "⊕")
    ("mp" "∓")
    ("pm" "±")
    ("cdot" "⋅")
    ("ast" "∗")
    ("propto" "∝")
    ("sqsubseteq" "⊑")
    ("sqsupseteq" "⊒")
    ("parallel" "∥")
    ("dashv" "⊣")
    ("vdash" "⊢")
    ("succ" "≻")
    ("prec" "≺")
    ("approx" "≈")
    ("coloneqq" "≔")
    ("succeq" "≽")
    ("preceq" "≼")
    ("supset" "⊃")
    ("supseteq" "⊇")
    ("gg" "≫")
    ("ll" "≪")
    ("sim" "∼")
    ("simeq" "≃")
    ("asymp" "≍")
    ("smile" "⌣")
    ("frown" "⌢")
    ("bowtie" "⋈")
    ("models" "⊧")
    ("Vert" "∥")
    ("cong" "≅")
    ("doteq" "≐")
    ("triangleleft" "◁")
    ("triangleright" "▷")
    ("bigtriangleup" "△")
    ("bigtriangledown" "▽")
    ("circ" "∘")
    ("wedge" "∧")
    ("vee" "∨")
    ("intprod" "｣"))))

(defvar og/math-unspaced
  (append
   og/math-operators
   og/math-letters
   '(("infty" "∞")
     ("emptyset" "∅")
     ("dots" "…")
     ("cdots" "⋯")
     ("vdots" "⋮")
     ("ddots" "⋱")
     ("langle" "⟨")
     ("rangle" "⟩")
     ("rceil" "⌉")
     ("lceil" "⌈")
     ("rfloor" "⌋")
     ("lfloor" "⌊")
     ("dagger" "†" )
     ("dag" "†")
     ("ddag" "‡")
     ;; ("S" "§")
     ("star" "★")
     ("bullet" "•")
     ("vDash" "⊨")
     ("surd" "√")
     ("angle" "∠")
     ("triangle" "△")
     ("flat" "♭")
     ("natural" "♮")
     ("sharp" "♯")
     ("clubsuit" "♣")
     ("diamondsuit" "♢")
     ("heartsuit" "♡")
     ("spadesuit" "♠")
     ("D" "D")
     ("left(" "❪")
     ("right)" "❫")
     ("left\\[" "[")
     ("right\\]" "]"))))

(defvar og/spaced-custom
  '(("Div" [?\s (Br . Bl) ?\s (Bc . Br) ?∇ (Br . Bc) ?\s (Br . Bc) ?\s (Bc . Bl) ?·])
    ("Lapl" [?\s (Bc . Bc) ?\s (Bc . Br) ?∆])
    ("Grad" [?\s (Bc . Bc) ?\s (Bc . Br) ?∇])
    ("Curl" [?\s (Br . Bl) ?\s (Bc . Br) ?∇ (Br . Bc) ?\s (Br . Bc) ?\s (Bc . Bl) ?×])
    ("int" [?\s (Bc . Bc) ?\s (Bc . Br) ?∫])
    ("dd" [?\s (Br . Bc) ?𝖽])))

(defvar og/math-commands
  '(("bra" "⟨" "|")
    ("ket" "|" "⟩")
    ("abs" "|" "|")
    ("norm" "‖" "‖")))

(defun og/math-regexp-unspaced (name symbol)
  (list (list (format "\\(\\\\%s{}\\)" name) symbol)
        (list (format "\\(\\\\%s\\)[^[:alnum:]{]" name) symbol)))

(defun og/math-regexp-spaced (name symbol)
  (setq symbol `[?\s (Br . Bl) ?\s (Bc . Bc) ,(string-to-char symbol)])
  (list (list (format "\\(\\\\%s\\( \\|{}\\)\\)" name) symbol)
        (list (format "\\([ ]?\\\\%s\\)[^[:alnum:]{ ]" name) symbol)))

(defun og/math-regexp-spaced-custom (name symbol)
  (list (format "\\(\\\\%s\\( \\|{}\\)\\)" name) symbol))

(defun og/math-replacements ()
  (append
   (-flatten-n 1 (--map (apply 'og/math-regexp-spaced it) og/math-spaced))
   (-flatten-n 1 (--map (apply 'og/math-regexp-unspaced it) og/math-unspaced))
   (--map (apply 'og/math-regexp-spaced-custom it) og/spaced-custom)))

(defun og/curry (fun &rest args)
  "Partially apply FUN to ARGS.  The result is a new function.
This idiom is preferred over `lexical-let'."
  `(lambda (&rest more) (apply ',fun (append ',args more))))

(defun og/pretty-match-font-lock-helper (symbol &optional match-num)
  (unless match-num (setq match-num 1))
  `(,match-num (compose-region
                (match-beginning ,match-num)
                (match-end ,match-num)
                ,symbol
                'decompose-region)))

(defun og/pretty-math-command-matcher (command limit)
  (let ((end-brace1 nil)
        (end-brace2 nil)
        (data nil))
    (catch 'done
      (while (re-search-forward (concat "\\\\" command "{") limit t)
        (when (condition-case nil
                  (save-excursion
                    (backward-char)
                    (forward-sexp)
                    (when (eq (char-before) 125)  ;; 125 is "}"
                      (backward-char)
                    (setq end-brace1 (point-marker))
                    (forward-char)
                    (setq end-brace2 (point-marker))))
                (error nil))
          (setq data (match-data))
          (set-match-data (list
                           (nth 0 data)
                           end-brace2
                           (nth 0 data)
                           (nth 1 data)
                           end-brace1
                           end-brace2))
          (throw 'done (point)))))))

(defun og/pretty-math-gen-font-lock-keywords (name symbol &optional name2 symbol2)
  `(,name ,(og/pretty-match-font-lock-helper symbol)))

(defun og/pretty-math-gen-font-lock-commands (name open-delim close-delim)
  `(,(og/curry 'og/pretty-math-command-matcher name)
    ,(og/pretty-match-font-lock-helper open-delim 1)
    ,(og/pretty-match-font-lock-helper close-delim 2)))

(defun og/pretty-math-keywords ()
  (append
   (--map (apply 'og/pretty-math-gen-font-lock-keywords it) (og/math-replacements))
   (--map (apply 'og/pretty-math-gen-font-lock-commands it) og/math-commands)))

(provide 'og-pretty-math)
